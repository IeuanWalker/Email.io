@page "/Project/{projectId}/Template/{templateId}/Version/{versionId}"
@model Admin.Pages.Project.TemplateModel
@{
    ViewData["Title"] = @Model.Version.Name;
    Layout = "_LayoutTemplate";
}


@section Styles
{
    <link rel="stylesheet" href="/css/codemirror.min.css" />

    <svg xmlns="http://www.w3.org/2000/svg" class="d-none"><symbol id="reset" viewbox="0 0 41.591 30" class="sg-resize-icon"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.364 29.5c-.476 0-.864-.388-.864-.864V1.364C.5.888.888.5 1.364.5h38.863c.477 0 .864.388.864.864v27.272c0 .476-.387.864-.863.864H1.364z" class="sg-fill"></path><path fill="currentColor" d="M40.227 1c.2 0 .364.163.364.364v27.273c0 .2-.162.364-.363.364H1.364c-.2 0-.364-.163-.364-.364V1.364c0-.2.163-.364.364-.364h38.863m0-1H1.364C.61 0 0 .61 0 1.364v27.273C0 29.39.61 30 1.364 30h38.864c.753 0 1.364-.61 1.364-1.364V1.364C41.592.61 40.98 0 40.227 0z" class="sg-stroke"></path></symbol><symbol id="1280" viewbox="0 0 38 30" class="sg-resize-icon"><path fill="currentColor" fill-rule="evenodd" clip-rule="evenodd" d="M25 24v6H13v-6h12z" class="sg-stroke"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M27 29v1H11v-1h16zM1.02 0h35.96C37.545 0 38 .468 38 1.044v22.91c0 .578-.456 1.046-1.02 1.046H1.02C.455 25 0 24.532 0 23.956V1.044C0 .468.456 0 1.02 0z" class="sg-fill"></path><path d="M1.02 1L1 23.956 36.98 24 37 1.044 36.98 1M14 25h10v4H14z" class="sg-fill"></path><path fill="currentColor" d="M36.98 0H1.02C.455 0 0 .468 0 1.044v22.91C0 24.533.456 25 1.02 25H13v4h-2v1h16v-1h-2v-4h11.98c.564 0 1.02-.468 1.02-1.044V1.044C38 .468 37.544 0 36.98 0zM24 29H14v-4h10v4zm12.98-5L1 23.956 1.02 1h35.96l.02.044L36.98 24z" class="sg-stroke"></path></symbol><symbol id="1024" viewbox="0 0 28 30" class="sg-resize-icon"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.35 24.5c-.47 0-.85-.388-.85-.864V6.364c0-.476.38-.864.85-.864h25.3c.47 0 .85.388.85.864v17.272c0 .476-.38.864-.85.864H1.35z" class="sg-fill"></path><path fill="currentColor" d="M26.65 6c.193 0 .35.163.35.364v17.273c0 .2-.157.364-.35.364H1.35c-.193 0-.35-.163-.35-.364V6.364c0-.2.157-.364.35-.364h25.3m0-1H1.35C.603 5 0 5.61 0 6.364v17.273C0 24.39.604 25 1.35 25h25.3c.746 0 1.35-.61 1.35-1.364V6.364C28 5.61 27.396 5 26.65 5z" class="sg-stroke"></path><path fill="currentColor" d="M24 14c-.552 0-1 .448-1 1s.448 1 1 1 1-.448 1-1-.448-1-1-1z" class="sg-stroke"></path></symbol><symbol id="768" viewbox="0 0 20 30" class="sg-resize-icon"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.364 28.5c-.476 0-.864-.38-.864-.85V2.35c0-.47.388-.85.864-.85h17.273c.476 0 .863.38.863.85v25.3c0 .47-.388.85-.863.85H1.364z" class="sg-fill"></path><path fill="currentColor" d="M18.636 2c.2 0 .364.157.364.35v25.3c0 .193-.163.35-.364.35H1.364c-.2 0-.364-.157-.364-.35V2.35c0-.193.163-.35.364-.35h17.272m0-1H1.364C.61 1 0 1.604 0 2.35v25.3C0 28.397.61 29 1.364 29h17.273C19.39 29 20 28.396 20 27.65V2.35C20 1.603 19.39 1 18.636 1z" class="sg-stroke"></path><path fill="currentColor" d="M10 24c-.552 0-1 .448-1 1s.448 1 1 1 1-.448 1-1-.448-1-1-1z" class="sg-stroke"></path></symbol><symbol id="320" viewbox="0 0 14 30" class="sg-resize-icon"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.364 27.5c-.476 0-.864-.38-.864-.85v-16.3c0-.47.388-.85.864-.85h11.273c.476 0 .863.38.863.85v16.3c0 .47-.388.85-.863.85H1.364z" class="sg-fill"></path><path fill="currentColor" d="M12.636 10c.2 0 .364.157.364.35v16.3c0 .193-.163.35-.364.35H1.364c-.2 0-.364-.157-.364-.35v-16.3c0-.193.163-.35.364-.35h11.272m0-1H1.364C.61 9 0 9.604 0 10.35v16.3C0 27.397.61 28 1.364 28h11.273C13.39 28 14 27.396 14 26.65v-16.3C14 9.603 13.39 9 12.636 9z" class="sg-stroke"></path><path fill="currentColor" d="M7 23c-.552 0-1 .448-1 1s.448 1 1 1 1-.448 1-1-.448-1-1-1z" class="sg-stroke"></path></symbol></svg>
}

<header class="template-navbar">
    <a asp-page="/Project/Details" asp-route-id="@Model.ProjectId" class="template-navbar-buttons cursor-pointer"><p><i class="icon icon-back"></i></p></a>
    <a class="template-navbar-buttons tablinks active cursor-pointer" data-tabId="htmlContainer"><p>HTML</p></a>
    <a class="template-navbar-buttons tablinks cursor-pointer" data-tabId="plainTextContainer"><p>PLAIN TEXT</p></a>
    <a class="template-navbar-buttons tablinks mr-2 cursor-pointer" data-tabId="testDataContainer"><p>TEST DATA</p></a>
    <button class="btn btn-lg ml-2 cursor-pointer" onclick="Save()" id="SaveBtn">Save</button>
    <a class="js-cd-panel-trigger btn btn-link cursor-pointer settings" style="line-height: normal; height:auto" data-panel="settings">
        <ion-icon name="settings-outline" size="large" style="vertical-align: middle;"></ion-icon>
    </a>
</header>

<div class="grid">
    <div class="p-relative">
        <div id="htmlContainer" class="tabcontent active">
            <textarea id="htmlTextarea">@Model.Version.Html</textarea>
        </div>
        <div id="plainTextContainer" class="tabcontent">
            <textarea id="plainTextTextarea">@Model.Version.PlainText</textarea>
        </div>
        <div id="testDataContainer" class="tabcontent">
            <textarea id="testDataTextarea">@Model.Version.TestData</textarea>
        </div>
    </div>
    <div class="preview">
        <div class="subject">
            <p><strong>Subject: </strong><span id="Subject"></span></p>
        </div>
        <div class="test-responsive-navbar">
            <ul id="viewpr-list">
            </ul>
        </div>
        <div id="viewpr-content" class="demo-content">
            <iframe frameborder="0" id="preview-iframe"></iframe>
        </div>
    </div>

    <div class="template-divider"></div>
</div>

<form hidden method="post" asp-page-handler="UpdateTemplate" id="UpdateTemplateForm">
    @Html.HiddenFor(model => model.UpdateTemplate.ProjectId)
    @Html.HiddenFor(model => model.UpdateTemplate.TemplateId)
    @Html.HiddenFor(model => model.UpdateTemplate.VersionId)
    @Html.HiddenFor(model => model.UpdateTemplate.TestData)
    @Html.HiddenFor(model => model.UpdateTemplate.Html)
    @Html.HiddenFor(model => model.UpdateTemplate.PlainText)
</form>

@section Panels
{
    @*Settings panel*@
    <div class="cd-panel cd-panel--from-right js-cd-panel-settings">
        <div class="cd-panel__container">
            <div class="cd-panel__content">
                <a href="#0" class="cd-panel__close js-cd-close">Close</a>
                <h3 class="s-title pb-0">Settings</h3>
                <form class="form-horizontal" method="post" style="max-width: 800px" asp-page-handler="UpdateSettings">

                    @Html.HiddenFor(model => model.UpdateSettings.ProjectId)
                    @Html.HiddenFor(model => model.UpdateSettings.TemplateId)
                    @Html.HiddenFor(model => model.UpdateSettings.VersionId)
                    <div class="form-group">
                        <div class="col-3 col-sm-12">
                            <label class="form-label">@Html.DisplayNameFor(model => model.UpdateSettings.Name):</label>
                        </div>
                        <div class="col-9 col-sm-12">
                            <input class="form-input" type="text" asp-for="UpdateSettings.Name" placeholder="@Html.DisplayNameFor(model => model.UpdateSettings.Name)">
                            <span class="form-input-hint" asp-validation-for="UpdateSettings.Name"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-3 col-sm-12">
                            <label class="form-label">@Html.DisplayNameFor(model => model.UpdateSettings.Subject):</label>
                        </div>
                        <div class="col-9 col-sm-12">
                            <input class="form-input" type="text" asp-for="UpdateSettings.Subject" placeholder="@Html.DisplayNameFor(model => model.UpdateSettings.Subject)">
                            <span class="form-input-hint" asp-validation-for="UpdateSettings.Subject"></span>
                        </div>
                    </div>
                    <button type="submit" id="updateSettingsBtn" class="btn float-right" disabled>Update</button>
                </form>
                <h3 class="s-title pb-0">Test send</h3>
                <form class="form-horizontal" method="post" style="max-width: 800px" asp-page-handler="TestSend">
                    @Html.HiddenFor(model => model.TestSend.ProjectId)
                    @Html.HiddenFor(model => model.TestSend.TemplateId)
                    @Html.HiddenFor(model => model.TestSend.VersionId)
                     <div class="form-group">
                        <div class="col-3 col-sm-12">
                            <label class="form-label">@Html.DisplayNameFor(model => model.TestSend.Name):</label>
                        </div>
                        <div class="col-9 col-sm-12">
                            <input class="form-input" type="text" asp-for="TestSend.Name" placeholder="@Html.DisplayNameFor(model => model.TestSend.Name)">
                            <span class="form-input-hint" asp-validation-for="TestSend.Name"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-3 col-sm-12">
                            <label class="form-label">@Html.DisplayNameFor(model => model.TestSend.Email):</label>
                        </div>
                        <div class="col-9 col-sm-12">
                            <input class="form-input" type="text" asp-for="TestSend.Email" placeholder="@Html.DisplayNameFor(model => model.TestSend.Email)">
                            <span class="form-input-hint" asp-validation-for="TestSend.Email"></span>
                        </div>
                    </div>
                    <button type="submit" class="btn float-right">Send</button>
                </form>
            </div>
        </div>
    </div>

}

@section Scripts
{
    @*Listen for ctrl+s*@
    <script>
        document.addEventListener('keydown', e => {
            if (e.ctrlKey && e.key === 's') {
                // Prevent the Save dialog to open
                e.preventDefault();
                
                Save();
            }
        });
    </script>
    <script>
        var originalHtml = "@Model.Version.Html";
        var originalTestData = "@Model.Version.TestData";
    </script>
    @*Resizeable column*@
    <script>
        Split({
            columnGutters: [
                {
                    track: 1,
                    element: document.querySelector('.template-divider'),
                }
            ]
        })
    </script>

    @*Responsive tester*@
    <script src="/js/viewpr.min.js"></script>
    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded",
            function() {
                viewpr(params = {
                    svg: true
                });
            })
    </script>

    @*Tabs*@
    <script type="text/javascript">
        var currentPreviewTab = "htmlContainer";

        var tabLinks = document.querySelectorAll(".tablinks");
        var tabContent = document.querySelectorAll(".tabcontent");

        tabLinks.forEach(function(el) {
            el.addEventListener("click", openTabs);
        });

        function openTabs(el) {
            var btnTarget = el.currentTarget;
            var tabId = btnTarget.getAttribute('data-tabId');

            if (tabId == "htmlContainer"){
                currentPreviewTab = tabId;
                UpdatePreview();
            }
            else if (tabId == "plainTextContainer") {
                currentPreviewTab = tabId;
                UpdatePreview();
            }


            tabContent.forEach(function(el) {
                el.classList.remove("active");
            });

            tabLinks.forEach(function(el) {
                el.classList.remove("active");
            });

            document.querySelector("#" + tabId).classList.add("active");

            btnTarget.classList.add("active");
        }
    </script>

    @*CodeMirror*@
    <script src="/js/codemirror.min.js"></script>

    @*CodeMirror JSON editor*@
    <script>
        let testDataEditor = CodeMirror.fromTextArea(document.getElementById("testDataTextarea"),
            {
                lineNumbers: true,
                border: true,
                theme: "eclipse",
                lineWrapping: false,
                mode: "application/json",
                foldGutter: true,
                gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter", "CodeMirror-lint-markers"],
                styleActiveLine: true,
                lint: true,
                autoRefresh: true,
                autoCloseBrackets: true,
                matchBrackets: true,
                extraKeys: {
                    "F11": function(cm) {
                        cm.setOption("fullScreen", !cm.getOption("fullScreen"));
                    },
                    "Esc": function(cm) {
                        if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false);
                    }
                }
            });

        testDataEditor.on("change",
            function(resultEditor, change) {
                UpdatePreview();
            });
    </script>

    @*CodeMirror HTML editor*@
    <script>
        let htmlEditor = CodeMirror.fromTextArea(document.getElementById("htmlTextarea"),
            {
                lineNumbers: true,
                border: true,
                theme: "eclipse",
                HtmlMode: true,
                lineWrapping: false,
                mode: "text/html",
                gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter", "CodeMirror-lint-markers"],
                styleActiveLine: true,
                lint: true,
                foldGutter: true,
                autoCloseTags: true,
                autoRefresh: true,
                matchTags: true,
                extraKeys: {
                    "F11": function(cm) {
                        cm.setOption("fullScreen", !cm.getOption("fullScreen"));
                    },
                    "Esc": function(cm) {
                        if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false);
                    }
                }
            });

        htmlEditor.on("change",
            function(resultEditor, change) {
                UpdatePreview();
            });
    </script>

    @*CodeMirror Plain text editor*@
    <script>
        let plainTextEditor = CodeMirror.fromTextArea(document.getElementById("plainTextTextarea"),
            {
                lineNumbers: true,
                border: true,
                theme: "eclipse",
                HtmlMode: true,
                lineWrapping: false,
                mode: "text/html",
                gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter", "CodeMirror-lint-markers"],
                styleActiveLine: true,
                lint: true,
                foldGutter: true,
                autoCloseTags: true,
                autoRefresh: true,
                matchTags: true,
                extraKeys: {
                    "F11": function(cm) {
                        cm.setOption("fullScreen", !cm.getOption("fullScreen"));
                    },
                    "Esc": function(cm) {
                        if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false);
                    }
                }
            });

        plainTextEditor.on("change",
            function(resultEditor, change) {
                UpdatePreview();
            });
    </script>


    <script>
        document.addEventListener("DOMContentLoaded",
             function () {
            Handlebars.registerHelper('ifCond',
                function(v1, operator, v2, options) {
                    switch (operator) {
                    case '==':
                        return (v1 == v2) ? options.fn(this) : options.inverse(this);
                    case '===':
                        return (v1 === v2) ? options.fn(this) : options.inverse(this);
                    case '!=':
                        return (v1 != v2) ? options.fn(this) : options.inverse(this);
                    case '!==':
                        return (v1 !== v2) ? options.fn(this) : options.inverse(this);
                    case '<':
                        return (v1 < v2) ? options.fn(this) : options.inverse(this);
                    case '<=':
                        return (v1 <= v2) ? options.fn(this) : options.inverse(this);
                    case '>':
                        return (v1 > v2) ? options.fn(this) : options.inverse(this);
                    case '>=':
                        return (v1 >= v2) ? options.fn(this) : options.inverse(this);
                    default:
                        return options.inverse(this);
                    }
                });
        });
    </script>

    @*Preview handling*@
    <script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded",
            function () {
                UpdatePreview();
            });

        function UpdatePreview() {
            var template;
            if (currentPreviewTab == "htmlContainer"){
                template = Handlebars.compile(htmlEditor.getValue());
            }
            else if (currentPreviewTab == "plainTextContainer") {
                template = Handlebars.compile(
                    "<html style='background-color: white;'>" +
                    "<head>" +
                    "<link rel='preconnect' href='https://fonts.googleapis.com'>" +
                    "<link rel='preconnect' href='https://fonts.gstatic.com' crossorigin>" +
                    "<link href='https://fonts.googleapis.com/css2?family=Roboto&display=swap' rel='stylesheet'>" +
                    "</head>" +
                    "<body>" +
                    "<p style='white-space: pre-wrap; font-family: \"Roboto\", sans-serif;'>" + plainTextEditor.getValue() + "</p>" +
                    "</body>" +
                    "</html>");
            }

            var compiled = template(JSON.parse(testDataEditor.getValue()));

            document.getElementById("preview-iframe").src = "data:text/html;charset=utf-8," + escape(compiled);

            var subject = '@Model.Version.Subject';
            var templateSubject = Handlebars.compile(subject);
            var compiledSubject = templateSubject(JSON.parse(testDataEditor.getValue()));

            document.getElementById("Subject").innerText = compiledSubject;
        }
    </script>

    @*Update template*@
    <script>
        function Save() {
            jQuery.ajax({
                type: "POST",
                url: '?handler=UpdateTemplate',
                headers: { 'RequestVerificationToken': $('@Html.AntiForgeryToken()').val() },
                data: JSON.stringify({
                    "projectId": document.getElementById("UpdateTemplate_ProjectId").value,
                    "templateId": document.getElementById("UpdateTemplate_TemplateId").value,
                    "versionId": document.getElementById("UpdateTemplate_VersionId").value,
                    "testData": testDataEditor.getValue(),
                    "html": htmlEditor.getValue(),
                    "plainText": plainTextEditor.getValue()
                }),
                contentType: "application/json",
                dataType: "json",
                beforeSend: function () {
                    document.getElementById("SaveBtn").classList.add("loading");
                },
                success: function (data) {
                    showToast(data['toastTitle'], data['toastStatus']);
                },
                error: function (request, status, error) {
                    showToast('Sorry something has gone wrong', 'error');
                },
                complete: function(){
                    document.getElementById("SaveBtn").classList.remove("loading");
                }
            });
        }
    </script>

    @*Update settings*@
    <script>
        var originalName = '@Model.UpdateSettings.Name';
        var originalSubject = '@Model.UpdateSettings.Subject';

        document.getElementById("UpdateSettings_Name").addEventListener('input', EnableDisableSubmitBtn);
        document.getElementById("UpdateSettings_Subject").addEventListener('input', EnableDisableSubmitBtn);

        function EnableDisableSubmitBtn() {
            var name = document.getElementById("UpdateSettings_Name").value;
            var subject = document.getElementById("UpdateSettings_Subject").value;

            if (name != null && name.trim() != "" &&
                subject != null && subject.trim() != "" &&
                (name.trim().toLowerCase() != originalName.toLowerCase() || subject.trim().toLowerCase() != originalSubject.toLowerCase())) {
                document.getElementById("updateSettingsBtn").disabled = false;
            } else {
                document.getElementById("updateSettingsBtn").disabled = true;
            }
        }

    </script>
}