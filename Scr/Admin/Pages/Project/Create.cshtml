@page
@model Admin.Pages.Project.CreateModel
@{
    ViewData["Title"] = "Create project";
}

<div class="sticky-header">
    <h3>Create a new project</h3>
</div>
<form class="form-horizontal" id="createProjectForm" method="post" style="max-width: 800px" onsubmit="return validationFunction(Event)">
    @Html.HiddenFor(model => model.Project.ApiKey)
    <div class="form-group">
        <div class="col-3 col-sm-12">
            <label class="form-label" asp-for="Project.Name">@Html.DisplayNameFor(model => model.Project.Name):</label>
        </div>
        <div class="col-9 col-sm-12">
            <input autocomplete="off" class="form-input" type="text" asp-for="Project.Name" placeholder="@Html.DisplayNameFor(model => model.Project.Name)">
            <span class="form-input-hint" asp-validation-for="Project.Name"></span>
        </div>
    </div>
    <div class="form-group">
        <div class="col-3 col-sm-12">
            <label class="form-label" asp-for="Project.SubHeading">@Html.DisplayNameFor(model => model.Project.SubHeading):</label>
        </div>
        <div class="col-9 col-sm-12">
            <input autocomplete="off" class="form-input" type="text" asp-for="Project.SubHeading" placeholder="@Html.DisplayNameFor(model => model.Project.SubHeading)">
            <span class="form-input-hint" asp-validation-for="Project.SubHeading"></span>
        </div>
    </div>
    <div class="form-group">
        <div class="col-3 col-sm-12">
            <div class="d-flex align-items-center">
                <label class="form-label d-inline mr-2" asp-for="Project.Description">@Html.DisplayNameFor(model => model.Project.Description):</label>
                <div class="popover popover-right cursor-pointer" style="align-self:baseline">
                    <ion-icon name="information-circle-outline" style="font-size:1rem"></ion-icon>
                    <div class="popover-container">
                        <div class="card">
                            <div class="card-header">
                                <h4>Markdown support</h4>
                            </div>
                            <div class="card-body">
                                The description field support markdown formatting.
                            </div>
                            <div class="card-footer">
                                <a href="https://guides.github.com/features/mastering-markdown/" target="_blank" class="btn btn-primary">Markdown guide</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-9 col-sm-12" style="display:grid">
            <textarea autocomplete="off" class="form-input" type="text" asp-for="Project.Description" placeholder="@Html.DisplayNameFor(model => model.Project.Description)"></textarea>
            <span class="form-input-hint" asp-validation-for="Project.Description"></span>
        </div>
    </div>
    <div class="form-group">
        <div class="col-3 col-sm-12 d-flex align-items-center">
            <label class="form-label d-inline  mr-2" asp-for="Project.Tags">@Html.DisplayNameFor(model => model.Project.Tags):</label>
            <div class="popover popover-right d-flex align-items-center cursor-pointer" style="align-self:baseline">
                <ion-icon name="information-circle-outline" style="font-size:1rem"></ion-icon>
                <div class="popover-container">
                    <div class="card">
                        <div class="card-body">
                            Used to imporve project search
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-9 col-sm-12 d-flex">
            <input class="tags" />
            <button type="button">+</button>
            <input hidden asp-for="Project.Tags">
        </div>
    </div>
    <button type="submit" class="btn float-right">Create</button>

    <!-- form structure -->
</form>

@section Scripts
{
    <!-- Character counter -->
    <script type="text/javascript">
        VCountdown({
            target: '#Project_Name',
            maxChars: 200
        });
        VCountdown({
            target: '#Project_SubHeading',
            maxChars: 200
        });
    </script>

    <!-- Markdown editor -->
    <script>
        var simplemde = new SimpleMDE({
            element: document.getElementById("Project_Description"),
            status: false,
            status: [{
                className: "chars-length",
                defaultValue: function (el) {
                    el.innerHTML = "0";
                    el.style.marginRight = '-10px';
                    el.style.fontSize = 'unset';
                    el.style.color = '#3b4351';
                },
                onUpdate: function (el) {
                    if (500 - simplemde.value().length > 0) {
                        el.innerHTML = 500 - simplemde.value().length;
                        el.classList.remove('warn');
                        el.style.color = '#3b4351';
                    } else {
                        el.innerHTML = 500 - simplemde.value().length;
                        el.classList.add('warn');
                        el.style.color = '#fff';
                    }

                }
            }], //  // Another optional usage, with a custom status bar item that counts keystrokes
        });
    </script>

    <!-- Tags -->
    <script>
        var input = document.querySelector('.tags');
        var tagify = new Tagify(input,
            {
                delimiters: ',',
                pattern: /^[a-zA-Z0-9äöüÄÖÜ ]*$/,
            });

        input.nextElementSibling.addEventListener("click", onAddButtonClick);

        function onAddButtonClick() {
            tagify.addEmptyTag();
        }

        input.addEventListener('change', onChange)

        function onChange(e) {
            if (e.target.value == "") {
                document.getElementById("Project_Tags").value = "";
            } else {
                document.getElementById("Project_Tags").value = JSON.parse(e.target.value)
                    .filter(function (x) {
                        if (x['value'] == "" || x['value'] == null) {
                            return false;
                        }
                        return true;
                    })
                    .map(function (item) {
                        return item['value'];
                    });
            }

        }

        var dragsort = new DragSort(tagify.DOM.scope,
            {
                selector: '.' + tagify.settings.classNames.tag,
                callbacks: {
                    dragEnd: onDragEnd
                }
            });

        function onDragEnd(elm) {
            tagify.updateValueByDOMTags()
        }
    </script>
}